//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Reflection.AssemblyVersion("1.1.0.0")]
[assembly: System.Windows.Forms.AxHost.TypeLibraryTimeStamp("03/04/2010 08:36:18")]

namespace AxMTMicrImage {
    
    
    [System.Windows.Forms.AxHost.ClsidAttribute("{9e8ebaa8-573c-45d2-a64c-dd93489744de}")]
    [System.ComponentModel.DesignTimeVisibleAttribute(true)]
    [System.ComponentModel.DefaultEvent("MicrDataReceived")]
    public class AxMicrImage : System.Windows.Forms.AxHost {
        
        private MTMicrImage._MicrImage ocx;
        
        private AxMicrImageEventMulticaster eventMulticaster;
        
        private System.Windows.Forms.AxHost.ConnectionPointCookie cookie;
        
        public AxMicrImage() : 
                base("9e8ebaa8-573c-45d2-a64c-dd93489744de") {
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1745027077)]
        public virtual short CommPort {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CommPort", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.CommPort;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("CommPort", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.CommPort = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1745027076)]
        public virtual string Settings {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Settings", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.Settings;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Settings", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.Settings = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1745027075)]
        public virtual bool PortOpen {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PortOpen", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.PortOpen;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("PortOpen", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.PortOpen = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1745027074)]
        public virtual string MicrData {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MicrData", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.MicrData;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MicrData", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.MicrData = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1745027073)]
        public virtual float MicrTimeOut {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MicrTimeOut", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.MicrTimeOut;
            }
            set {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MicrTimeOut", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertySet);
                }
                this.ocx.MicrTimeOut = value;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        [System.Runtime.InteropServices.DispIdAttribute(1745027072)]
        public virtual bool DSRHolding {
            get {
                if ((this.ocx == null)) {
                    throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("DSRHolding", System.Windows.Forms.AxHost.ActiveXInvokeKind.PropertyGet);
                }
                return this.ocx.DSRHolding;
            }
        }
        
        public event System.EventHandler MicrDataReceived;
        
        public virtual string GetTrack(ref short trackNum) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetTrack", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.GetTrack(ref trackNum)));
            return returnValue;
        }
        
        public virtual string GetFName() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetFName", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.GetFName()));
            return returnValue;
        }
        
        public virtual string GetLName() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetLName", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.GetLName()));
            return returnValue;
        }
        
        public virtual string FindElement(short trackNum, string refChar, short displacement, string numDigits) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FindElement", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    trackNum,
                    refChar,
                    displacement,
                    numDigits,
                    false};
            System.Type typeVar = typeof(MTMicrImage._MicrImage);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("FindElement");
            string returnValue = ((string)(methodToInvoke.Invoke(this.ocx, paramArray)));
            return returnValue;
        }
        
        public virtual string FindElement(short trackNum, string refChar, short displacement, string numDigits, ref object directionBack) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FindElement", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.FindElement(trackNum, refChar, displacement, numDigits, ref directionBack)));
            return returnValue;
        }
        
        public virtual string GetDefSetting(string key) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetDefSetting", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    key,
                    System.Reflection.Missing.Value};
            System.Type typeVar = typeof(MTMicrImage._MicrImage);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("GetDefSetting");
            string returnValue = ((string)(methodToInvoke.Invoke(this.ocx, paramArray)));
            return returnValue;
        }
        
        public virtual string GetDefSetting(string key, ref object @default) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetDefSetting", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.GetDefSetting(key, ref @default)));
            return returnValue;
        }
        
        public virtual void SaveDefSetting(string key, string setting) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SaveDefSetting", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.SaveDefSetting(key, setting);
        }
        
        public virtual short ClearBuffer() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("ClearBuffer", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            short returnValue = ((short)(this.ocx.ClearBuffer()));
            return returnValue;
        }
        
        public virtual void About() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("About", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.About();
        }
        
        public virtual string MicrCommand(string strCommand) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MicrCommand", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    strCommand,
                    true};
            System.Type typeVar = typeof(MTMicrImage._MicrImage);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("MicrCommand");
            string returnValue = ((string)(methodToInvoke.Invoke(this.ocx, paramArray)));
            return returnValue;
        }
        
        public virtual string MicrCommand(string strCommand, ref object bReturnData) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("MicrCommand", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.MicrCommand(strCommand, ref bReturnData)));
            return returnValue;
        }
        
        public virtual string StoreImage() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("StoreImage", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    System.Reflection.Missing.Value};
            System.Type typeVar = typeof(MTMicrImage._MicrImage);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("StoreImage");
            string returnValue = ((string)(methodToInvoke.Invoke(this.ocx, paramArray)));
            return returnValue;
        }
        
        public virtual string StoreImage(ref object strTag) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("StoreImage", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.StoreImage(ref strTag)));
            return returnValue;
        }
        
        public virtual string FileMemoryStatus() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FileMemoryStatus", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.FileMemoryStatus()));
            return returnValue;
        }
        
        public virtual string FileMemoryErase() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FileMemoryErase", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.FileMemoryErase()));
            return returnValue;
        }
        
        public virtual string FileMemoryResetPointer() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FileMemoryResetPointer", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.FileMemoryResetPointer()));
            return returnValue;
        }
        
        public virtual string AddTag(string strTag) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("AddTag", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.AddTag(strTag)));
            return returnValue;
        }
        
        public virtual string Version() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Version", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.Version()));
            return returnValue;
        }
        
        public virtual string Reset() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Reset", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.Reset()));
            return returnValue;
        }
        
        public virtual string FormatShow() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FormatShow", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.FormatShow()));
            return returnValue;
        }
        
        public virtual string FormatChange(string strFormat) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("FormatChange", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.FormatChange(strFormat)));
            return returnValue;
        }
        
        public virtual string Save() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("Save", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.Save()));
            return returnValue;
        }
        
        public virtual string GetTiffTagByNumber(ref string fileToSearch, int tagNum, int iFDNumber) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetTiffTagByNumber", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.GetTiffTagByNumber(ref fileToSearch, tagNum, iFDNumber)));
            return returnValue;
        }
        
        public virtual object EnumTiffTags(ref string fileToSearch, int iFDNumber) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("EnumTiffTags", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object returnValue = ((object)(this.ocx.EnumTiffTags(ref fileToSearch, iFDNumber)));
            return returnValue;
        }
        
        public virtual void GetTagData(ref int tagIndex, ref int tagValue, ref string tagName, ref string tagDesc) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetTagData", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            this.ocx.GetTagData(ref tagIndex, ref tagValue, ref tagName, ref tagDesc);
        }
        
        public virtual int GetTiffTagNumByIndex(ref string fileToSearch, int indexNum, int iFDNumber) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetTiffTagNumByIndex", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.GetTiffTagNumByIndex(ref fileToSearch, indexNum, iFDNumber)));
            return returnValue;
        }
        
        public virtual int TransmitCurrentImage(string imgFileName, ref string statusMsg) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TransmitCurrentImage", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    imgFileName,
                    statusMsg,
                    System.Reflection.Missing.Value};
            System.Type typeVar = typeof(MTMicrImage._MicrImage);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("TransmitCurrentImage");
            int returnValue = ((int)(methodToInvoke.Invoke(this.ocx, paramArray)));
            statusMsg = ((string)(paramArray[1]));
            return returnValue;
        }
        
        public virtual int TransmitCurrentImage(string imgFileName, ref string statusMsg, ref object mTParams) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("TransmitCurrentImage", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.TransmitCurrentImage(imgFileName, ref statusMsg, ref mTParams)));
            return returnValue;
        }
        
        public virtual int SendNextImage(string imgFileName, ref string statusMsg) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SendNextImage", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            object[] paramArray = new object[] {
                    imgFileName,
                    statusMsg,
                    System.Reflection.Missing.Value};
            System.Type typeVar = typeof(MTMicrImage._MicrImage);
            System.Reflection.MethodInfo methodToInvoke = typeVar.GetMethod("SendNextImage");
            int returnValue = ((int)(methodToInvoke.Invoke(this.ocx, paramArray)));
            statusMsg = ((string)(paramArray[1]));
            return returnValue;
        }
        
        public virtual int SendNextImage(string imgFileName, ref string statusMsg, ref object mTParams) {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("SendNextImage", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            int returnValue = ((int)(this.ocx.SendNextImage(imgFileName, ref statusMsg, ref mTParams)));
            return returnValue;
        }
        
        public virtual string GetInput() {
            if ((this.ocx == null)) {
                throw new System.Windows.Forms.AxHost.InvalidActiveXStateException("GetInput", System.Windows.Forms.AxHost.ActiveXInvokeKind.MethodInvoke);
            }
            string returnValue = ((string)(this.ocx.GetInput()));
            return returnValue;
        }
        
        protected override void CreateSink() {
            try {
                this.eventMulticaster = new AxMicrImageEventMulticaster(this);
                this.cookie = new System.Windows.Forms.AxHost.ConnectionPointCookie(this.ocx, this.eventMulticaster, typeof(MTMicrImage.@__MicrImage));
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void DetachSink() {
            try {
                this.cookie.Disconnect();
            }
            catch (System.Exception ) {
            }
        }
        
        protected override void AttachInterfaces() {
            try {
                this.ocx = ((MTMicrImage._MicrImage)(this.GetOcx()));
            }
            catch (System.Exception ) {
            }
        }
        
        internal void RaiseOnMicrDataReceived(object sender, System.EventArgs e) {
            if ((this.MicrDataReceived != null)) {
                this.MicrDataReceived(sender, e);
            }
        }
    }
    
    [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]
    public class AxMicrImageEventMulticaster : MTMicrImage.@__MicrImage {
        
        private AxMicrImage parent;
        
        public AxMicrImageEventMulticaster(AxMicrImage parent) {
            this.parent = parent;
        }
        
        public virtual void MicrDataReceived() {
            System.EventArgs micrdatareceivedEvent = new System.EventArgs();
            this.parent.RaiseOnMicrDataReceived(this.parent, micrdatareceivedEvent);
        }
    }
}
